setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
```{r}
```{r}
```{r}
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
read.csv(C:/Users/kemar/Documents/GitHub/CSU_CM515_2024/modules/02_RStudio/work/Table_S4_Signal_to_noise_quantification_table.csv)
read.csv("Table_S4_Signal_to_noise_quantification_table.csv")
signal_to_noise<- read.csv("Table_S4_Signal_to_noise_quantification_table.csv")
head(signal_to_noise)
str(signal_to_noise)
# assign a series of words to the vector object called organism:
organism <- c("human", "mouse", "worm", "yeast", "maize")
# Then, recall it:
organism
# How many elements are in this vector?
length(organism)
# What is the third element?
organism[3]
# Let's create a vector for each organism's kingdom like so:
kingdom <- c("animalia", "animalia", "animalia", "fungi", "plantae")
# What is the class of this vector?
class(kingdom)
# What is its structure?
str(kingdom)
# By default, this vector is a character vector. However, we can convert it to a character vector like so. This is a reassignment expression that overwrites the old vector kingdom with a factor vector.
kingdom <- as.factor(kingdom)
# check what happened:
class(kingdom)
str(kingdom)
# Ensure you have a character vector called organism with a length of 5
str(organism)
# Ensure you have a factor vector called kingdom with a length of 5
str(kingdom)
# Create a numeric vector called chromosomes with corresponding data:
chromosomes <- c(23, 20, 5, 16, 10)
str(chromosomes)
# Create a logical vector called haploid with corresponding data
haploid <- c(FALSE, FALSE, FALSE, TRUE, FALSE)
str(haploid)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
str(model_systems)
class(model_systems)
model_systems$chromosomes
model_systems[2,3]
model_systems[3, ]
model_systems[ ,3]
# How many rows are there?
nrow(model_systems)
# How many columns are there?
ncol(model_systems)
# What are the names of the columns?
colnames(model_systems)
# What is the dimension of the data frame?
dim(model_systems)
# What is the structure of this object?
str(model_systems)
# Can you give me a summary of the data?
summary(model_systems)
mean(chromosomes)
mean(chromosomes, trim=0.2)
chromosomes
mean(c(20,16,10))
test<-c(34, 35, 34, 36, NA)
mean(test)
mean(test, na.rm=TRUE)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
# Check we're in the right place
getwd()
# Check how read.table is used
help(read.table)
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Actually, I don't like those number row names
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
# That only printed out the data from the file, it didn't capture it.
# To capture the data, use an assignment expression:
VaxByState <- read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
:+1: Use help(read.table) to learn how you can also use read.csv or read.csv2 to upload comma separated content, also! There are many ways to do the same thing in R.
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
# Check we're in the right place
getwd()
# Check how read.table is used
help(read.table)
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Actually, I don't like those number row names
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
# That only printed out the data from the file, it didn't capture it.
# To capture the data, use an assignment expression:
VaxByState <- read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
#+1: Use help(read.table) to learn how you can also use read.csv or read.csv2 to upload comma separated content, also! There are many ways to do the same thing in R.
vaxbystate
VaxByState
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
colnames(vaxbystate)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
colnames(VaxByState)
# It looks like we want columns 1, 5, & 11
# Let's subset the data to create a new object called
#leave all the rows: square bracket, space, comma, then (rows you want)
vaxbystate_summary <- VaxByState[ , c(1,5,11)]
dim(VaxByState_summary)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/work")
colnames(VaxByState)
# It looks like we want columns 1, 5, & 11
# Let's subset the data to create a new object called
#leave all the rows: square bracket, space, comma, then (rows you want)
VaxByState_summary <- VaxByState[ , c(1,5,11)]
dim(VaxByState_summary)
head(VaxByState_summary)
# Now, let's explore the function write.table()
help(write.table)
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)")
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)", quote=FALSE)
# We can use integer or numeric or integer classes as input
str(VaxByState)
# Use colnames to see the options for data we have available:
colnames(VaxByState)
# We'll use these x-values...
xVacc <- VaxByState$people_vaccinated_per_hundred
# ... and these y-values:
yBoost <- VaxByState$total_boosters_per_hundred
# Let's plot it!
plot(xVacc, yBoost)
# Let's add some labels
text(xVacc, yBoost, rownames(VaxByState),col='darkblue', pos = 4, cex = 0.8)
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
class(users)
class(logins)
super_vector <- c(users, logins)
class(super_vector)
as.numeric(super_vector)
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
class(users)
class(logins)
super_vector <- c(users, logins)
class(super_vector)
as.numeric(super_vector)
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
