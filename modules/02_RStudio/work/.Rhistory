output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes(x = year, y=n, color=country)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
microreact_drug_resistance %>% count(drug_resistance, amr_gene) %>% table()
microreact_drug_resistance %>% count(drug_resistance, amr_gene) %>% knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(janitor)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(paletteer)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
#Here I am adding a column that codes for type of drug resistance
microreact_drug_resistance <- microreact %>%
mutate( drug_resistance = case_when(
fcz=="Not_Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "NR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "FCZ",
fcz=="Not_Resistant" & mcf=="Resistant" & amb=="Not_Resistant" ~ "MCF",
fcz=="Not_Resistant" & mcf=="Not_Resistant" & amb=="Resistant" ~ "AMB",
fcz=="Resistant"& mcf=="Resistant"& amb=="Not_Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Not_Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "XDR"
))
#Here I am adding another column that codes for presence or absence of known drug resistance genes
microreact_drug_resistance <- microreact_drug_resistance %>%
mutate( amr_gene = case_when(
erg11 != "WT" & fks1=="WT" ~ "ERG11",
fks1 !="WT"& erg11 == "WT" ~ "FKS1",
erg11 != "WT" & fks1 !="WT" ~ "ERG11 & FKS1",
fks1 =="WT" & erg11 == "WT" ~ "No AMR genes"
))
case_counts <- microreact_drug_resistance %>%
count(country, year, amr_gene, drug_resistance) %>%
mutate(year=as.factor(year)) %>%
print()
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("calecopal::kelp2")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
library(readr)
library(tidyverse)
library(janitor)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(paletteer)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
#Here I am adding a column that codes for type of drug resistance
microreact_drug_resistance <- microreact %>%
mutate( drug_resistance = case_when(
fcz=="Not_Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "NR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "FCZ",
fcz=="Not_Resistant" & mcf=="Resistant" & amb=="Not_Resistant" ~ "MCF",
fcz=="Not_Resistant" & mcf=="Not_Resistant" & amb=="Resistant" ~ "AMB",
fcz=="Resistant"& mcf=="Resistant"& amb=="Not_Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Not_Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "XDR"
))
#Here I am adding another column that codes for presence or absence of known drug resistance genes
microreact_drug_resistance <- microreact_drug_resistance %>%
mutate( amr_gene = case_when(
erg11 != "WT" & fks1=="WT" ~ "ERG11",
fks1 !="WT"& erg11 == "WT" ~ "FKS1",
erg11 != "WT" & fks1 !="WT" ~ "ERG11 & FKS1",
fks1 =="WT" & erg11 == "WT" ~ "No AMR genes"
))
case_counts <- microreact_drug_resistance %>%
count(country, year, amr_gene, drug_resistance) %>%
mutate(year=as.factor(year)) %>%
print()
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("calecopal::kelp2")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(devtools)
install.packages(c("askpass", "BH", "bit", "blob", "brew", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "corrr", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "estimability", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "gapminder", "gargle", "generics", "gert", "gganimate", "ggforce", "ggmap", "ggplot2", "ggrepel", "ggsci", "ggVennDiagram", "gh", "gifski", "gitcreds", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labeling", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "maptools", "markdown", "modelr", "multcomp", "multcompView", "mvtnorm", "naniar", "norm", "openssl", "paletteer", "palmerpenguins", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "prettyunits", "prismatic", "processx", "promises", "proxy", "ps", "purrr", "qap", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "repr", "reprex", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "skimr", "snakecase", "sourcetools", "sp", "stringi", "stringr", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "transformr", "TSP", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "visdat", "vroom", "waldo", "whisker", "withr", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("askpass", "BH", "bit", "blob", "brew", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "corrr", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "estimability", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "gapminder", "gargle", "generics", "gert", "gganimate", "ggforce", "ggmap", "ggplot2", "ggrepel", "ggsci", "ggVennDiagram", "gh", "gifski", "gitcreds", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labeling", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "maptools", "markdown", "modelr", "multcomp", "multcompView", "mvtnorm", "naniar", "norm", "openssl", "paletteer", "palmerpenguins", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "prettyunits", "prismatic", "processx", "promises", "proxy", "ps", "purrr", "qap", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "repr", "reprex", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "skimr", "snakecase", "sourcetools", "sp", "stringi", "stringr", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "transformr", "TSP", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "visdat", "vroom", "waldo", "whisker", "withr", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
library(readr)
GJ1 <- read_csv("school/Fall 2023/R_Studio/GJ1.csv")
View(GJ1)
install.packages(c("askpass", "BH", "brew", "brio", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fs", "gargle", "gert", "ggmap", "ggplot2", "ggrepel", "ggthemes", "ggVennDiagram", "ggwordcloud", "gifski", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "jsonlite", "knitr", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "markdown", "mvtnorm", "norm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "processx", "profvis", "progress", "promises", "purrr", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "RgoogleMaps", "rlang", "roxygen2", "rprojroot", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils"))
install.packages(c("askpass", "BH", "brew", "brio", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fs", "gargle", "gert", "ggmap", "ggplot2", "ggrepel", "ggthemes", "ggVennDiagram", "ggwordcloud", "gifski", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "jsonlite", "knitr", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "markdown", "mvtnorm", "norm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "processx", "profvis", "progress", "promises", "purrr", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "RgoogleMaps", "rlang", "roxygen2", "rprojroot", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils"))
library("swirl")
library(palmerspenguins)
library(palmerpenguins)
data<-"penguins"
head(penguins)
summary(penguins)
knitr::opts_chunk$set(echo = TRUE)
library(palmerpenguins)
data<- "penguins"
head(penguins)
library(tidyr)
library(tidyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(dplyr)
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(tidyr)
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rtools")
library(tidyr)
remove.packages("cli")
install.packages("cli")
install.packages("cli")
library(tidyr)
library(dplyr)
x
x<-5+7
x
# assign a series of words to the vector object called organism:
organism <- c("human", "mouse", "worm", "yeast", "maize")
# Then, recall it:
organism
# How many elements are in this vector?
length(organism)
# What is the third element?
organism[3]
kingdom <- c("animalia", "animalia", "animalia", "fungi", "plantae")
class(kingdom)
class(kingdom)
str(kingdom)
``` r
``` r
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
super_vector <- c(users, logins)
as.numeric(super_vector)
# Ensure you have a character vector called organism with a length of 5
str(organism)
# Create a numeric vector called chromosomes with corresponding data:
chromosomes <- c(23, 20, 5, 16, 10)
str(chromosomes)
# Create a logical vector called haploid with corresponding data
haploid <- c(FALSE, FALSE, FALSE, TRUE, FALSE)
str(haploid)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
str(model_systems)
# Explore what you have created
model_systems
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
``` {r}
knitr::opts_chunk$set(echo = TRUE)
# assign a series of words to the vector object called organism:
organism <- c("human", "mouse", "worm", "yeast", "maize")
# Then, recall it:
organism
# How many elements are in this vector?
length(organism)
# What is the third element?
organism[3]
# Let's create a vector for each organism's kingdom like so:
kingdom <- c("animalia", "animalia", "animalia", "fungi", "plantae")
# What is the class of this vector?
class(kingdom)
# What is its structure?
str(kingdom)
# By default, this vector is a character vector. However, we can convert it to a character vector like so. This is a reassignment expression that overwrites the old vector kingdom with a factor vector.
kingdom <- as.factor(kingdom)
# check what happened:
class(kingdom)
str(kingdom)
# Ensure you have a character vector called organism with a length of 5
str(organism)
# Ensure you have a factor vector called kingdom with a length of 5
str(kingdom)
# Create a numeric vector called chromosomes with corresponding data:
chromosomes <- c(23, 20, 5, 16, 10)
str(chromosomes)
# Create a logical vector called haploid with corresponding data
haploid <- c(FALSE, FALSE, FALSE, TRUE, FALSE)
str(haploid)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
str(model_systems)
class(model_systems)
dim(model_systems)
str(model_systems)
class(model_systems)
# Explore what you have created
model_systems
model_systems$chromosomes
model_systems[2,3]
model_systems[2, ]
model_systems[ ,3]
model_systems[2, ]
model_systems[3, ]
# How many rows are there?
nrow(model_systems)
# How many columns are there?
ncol(model_systems)
# What is the dimension of the data frame?
dim(model_systems)
# What are the names of the columns?
colnames(model_systems)
# What is the dimension of the data frame?
dim(model_systems)
# What is the structure of this object?
str(model_systems)
# Can you give me a summary of the data?
summary(model_systems)
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Heather's code:
languages <- (English, Spanish, Japanese, French)
# Heather's code:
languages <- ("English","Spanish", "Japanese","French")
# Heather's code:
languages <- (English,Spanish, Japanese,French)
# Heather's code:
languages <- (English, Spanish, Japanese, French)
# Heather's code:
languages <- c("English", "Spanish", "Japanese", "French")
_greetings_ <- c("hello", "hola", "ohio", "bonjour")
greetings <- c("hello", "hola", "ohio", "bonjour")
partings < c("bye", "adios", "mata", "salut")
partings <- c("bye", "adios", "mata", "salut")
dictionary <- DataFrame(languages, greetings, partings)
dictionary <- Data.Frame(languages, greetings, partings)
dictionary <- data.frame(languages, greetings, partings)
dimens(dictionary)
dim(dictionary)
dictionary
knitr::opts_chunk$set(echo = TRUE)
mean(test)
test<-c(34, 35, 34, 36, NA)
mean(test)
mean(test, na.rm=TRUE)
mean(chromosomes)
mean(chromosomes, trim=0.2)
chromosomes
mean(c(23,20,16, 10))
mean(c(23,20,16)
mean(c(23,20,16)
mean(c(23,20,16))
mean(c(20,16, 10))
setwd("C:\Users\kemar\Documents\GitHub\CSU_CM515_2024\modules\02_RStudio\1_31_24\US_COVID_Vacc_by_StateTerr.csv")
help("read.table")
getwd()
setwd("C:/Users/kemar/Documents/Github/CSU_CM515_2024_modules")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Check how read.table is used
help(read.table)
help(read.table)
read.table("C:\Users\kemar\Documents\GitHub\CSU_CM515_2024\modules\02_RStudio\1_31_24\US_COVID_Vacc_by_StateTerr.csv"), sep=",", header=TRUE)
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
getwd()
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Look at the data using read.table
read.csv("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Check we're in the right place
getwd()
# Check how read.table is used
help(read.table)
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# That only printed out the data from the file, it didn't capture it.
# To capture the data, use an assignment expression:
VaxByState <- read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
vaxbystate<-read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Check we're in the right place
getwd()
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
# Check we're in the right place
getwd()
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Check we're in the right place
getwd()
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
# Check we're in the right place
getwd()
# Check how read.table is used
help(read.table)
# Look at the data using read.table
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE)
# Actually, I don't like those number row names
read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
# That only printed out the data from the file, it didn't capture it.
# To capture the data, use an assignment expression:
VaxByState <- read.table("US_COVID_Vacc_by_StateTerr.csv", sep = ",", header = TRUE, row.names = "location")
:+1: Use help(read.table) to learn how you can also use read.csv or read.csv2 to upload comma separated content, also! There are many ways to do the same thing in R.
vaxbystate
# Look at the column names
colnames(VaxByState)
# Let's subset the data to create a new object called
VaxByState_summary <- VaxByState[ , c(1,5,11)]
dim(VaxByState_summary)
head(VaxByState_summary)
# Now, let's explore the function write.table()
help(write.table)
# Look at the column names
colnames(vaxbystate)
# It looks like we want columns 1, 5, & 11
# Let's subset the data to create a new object called
#leave all the rows: square bracket, space, comma, then (rows you want)
vaxbystate_summary <- VaxByState[ , c(1,5,11)]
dim(VaxByState_summary)
head(VaxByState_summary)
# Now, let's explore the function write.table()
help(write.table)
write.table(VaxByState)
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)")
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)", quote=FALSE)
getwd()
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)", quote=FALSE)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
# Let's subset the data to create a new object called
#leave all the rows: square bracket, space, comma, then (rows you want)
vaxbystate_summary <- VaxByState[ , c(1,5,11)]
write.table(VaxByState, file="Vaccinations_by_state_SUMMARY.txt", sep="\t)", quote=FALSE)
setwd("~/GitHub/CSU_CM515_2024/modules/02_RStudio/1_31_24")
# We can use integer or numeric or integer classes as input
str(VaxByState)
# Use colnames to see the options for data we have available:
colnames(VaxByState)
# We'll use these x-values...
xVacc <- VaxByState$people_vaccinated_per_hundred
# ... and these y-values:
yBoost <- VaxByState$total_boosters_per_hundred
# Let's plot it!
plot(xVacc, yBoost)
# Let's add some labels
text(xVacc, yBoost, rownames(VaxByState),col='darkblue', pos = 4, cex = 0.8)
# Let's add some labels
library(plot.new)
# Let's plot it!
plot(xVacc, yBoost)
# We'll use these x-values...
xVacc <- VaxByState$people_vaccinated_per_hundred
# ... and these y-values:
yBoost <- VaxByState$total_boosters_per_hundred
# Let's plot it!
plot(xVacc, yBoost)
# Let's add some labels
text(xVacc, yBoost, rownames(VaxByState),col='darkblue', pos = 4, cex = 0.8)
```
pdf(file = "240131_Rplot_vacc.pdf", width = 8, height = 8 )
# Let's plot it!
plot(xVacc, yBoost)
# Let's add some labels
text(xVacc, yBoost, rownames(VaxByState),col='darkblue', pos = 4, cex = 0.8)
dev.off()
