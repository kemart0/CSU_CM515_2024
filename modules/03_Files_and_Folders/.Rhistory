ggplot(aes(drug_resistance, amr_gene, fill=n))+
geom_tile(color="black")+
geom_text(aes(label = n), color = "white", size = 4)+
scale_fill_viridis()+
theme_classic()+
labs(title="Heat Map Comparison of AMR Genes and Drug Resistance",
x="Drug Resistance",
y="AMR Gene",
caption="Blank: n=0.
Drugs:AMB= Amphotericin B, FCZ= Fluconazole, MCF= Micafungin, MDR= Multi-Drug Resistance, XDR= Extreme Drug Resistance (all 3),NR= No Drug Resistance.
Data from Tracing the Evolutionary History and Global Expansion of Candida auris Using Population Genomic Analyses' by Chow et al 2020 ")+
heatmap <- microreact_drug_resistance %>%
count(drug_resistance, amr_gene) %>%
filter(drug_resistance!="NA") %>%
ggplot(aes(drug_resistance, amr_gene, fill=n))+
geom_tile(color="black")+
geom_text(aes(label = n), color = "white", size = 4)+
scale_fill_viridis()+
theme_classic()+
labs(title="Heat Map Comparison of AMR Genes and Drug Resistance",
x="Drug Resistance",
y="AMR Gene",
caption="Blank: n=0.
Drugs:AMB= Amphotericin B, FCZ= Fluconazole, MCF= Micafungin, MDR= Multi-Drug Resistance, XDR= Extreme Drug Resistance (all 3),NR= No Drug Resistance.
Data from Tracing the Evolutionary History and Global Expansion of Candida auris Using Population Genomic Analyses' by Chow et al 2020 ")
ggsave(heatmap, CAheatmap.png, limitsize = T)
heatmap <- microreact_drug_resistance %>%
count(drug_resistance, amr_gene) %>%
filter(drug_resistance!="NA") %>%
ggplot(aes(drug_resistance, amr_gene, fill=n))+
geom_tile(color="black")+
geom_text(aes(label = n), color = "white", size = 4)+
scale_fill_viridis()+
theme_classic()+
labs(title="Heat Map Comparison of AMR Genes and Drug Resistance",
x="Drug Resistance",
y="AMR Gene",
caption="Blank: n=0.
Drugs:AMB= Amphotericin B, FCZ= Fluconazole, MCF= Micafungin, MDR= Multi-Drug Resistance, XDR= Extreme Drug Resistance (all 3),NR= No Drug Resistance.
Data from Tracing the Evolutionary History and Global Expansion of Candida auris Using Population Genomic Analyses' by Chow et al 2020 ")
microreact_drug_resistance %>%
count(drug_resistance, amr_gene) %>%
filter(drug_resistance!="NA") %>%
ggplot(aes(drug_resistance, amr_gene, fill=n))+
geom_tile(color="black")+
geom_text(aes(label = n), color = "white", size = 4)+
scale_fill_viridis()+
theme_classic()+
labs(title="Heat Map Comparison of AMR Genes and Drug Resistance",
x="Drug Resistance",
y="AMR Gene",
caption="Blank: n=0.
Drugs:AMB= Amphotericin B, FCZ= Fluconazole, MCF= Micafungin, MDR= Multi-Drug Resistance, XDR= Extreme Drug Resistance (all 3),NR= No Drug Resistance.
Data from Tracing the Evolutionary History and Global Expansion of Candida auris Using Population Genomic Analyses' by Chow et al 2020 ")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(janitor)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(paletteer)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
case_counts <- microreact %>%
count(country, year)
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("calecopal::kelp2")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "Australia"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes(x = year, y=n, color=country)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
microreact_drug_resistance %>% count(drug_resistance, amr_gene) %>% table()
microreact_drug_resistance %>% count(drug_resistance, amr_gene) %>% knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(janitor)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(paletteer)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
#Here I am adding a column that codes for type of drug resistance
microreact_drug_resistance <- microreact %>%
mutate( drug_resistance = case_when(
fcz=="Not_Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "NR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "FCZ",
fcz=="Not_Resistant" & mcf=="Resistant" & amb=="Not_Resistant" ~ "MCF",
fcz=="Not_Resistant" & mcf=="Not_Resistant" & amb=="Resistant" ~ "AMB",
fcz=="Resistant"& mcf=="Resistant"& amb=="Not_Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Not_Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "XDR"
))
#Here I am adding another column that codes for presence or absence of known drug resistance genes
microreact_drug_resistance <- microreact_drug_resistance %>%
mutate( amr_gene = case_when(
erg11 != "WT" & fks1=="WT" ~ "ERG11",
fks1 !="WT"& erg11 == "WT" ~ "FKS1",
erg11 != "WT" & fks1 !="WT" ~ "ERG11 & FKS1",
fks1 =="WT" & erg11 == "WT" ~ "No AMR genes"
))
case_counts <- microreact_drug_resistance %>%
count(country, year, amr_gene, drug_resistance) %>%
mutate(year=as.factor(year)) %>%
print()
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("calecopal::kelp2")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
library(readr)
library(tidyverse)
library(janitor)
library(ggthemes)
library(shiny)
library(shinydashboard)
library(paletteer)
microreact<- read_csv("Data/microreact_isolates.csv")
microreact <- janitor::clean_names(microreact)
#Here I am adding a column that codes for type of drug resistance
microreact_drug_resistance <- microreact %>%
mutate( drug_resistance = case_when(
fcz=="Not_Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "NR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Not_Resistant" ~ "FCZ",
fcz=="Not_Resistant" & mcf=="Resistant" & amb=="Not_Resistant" ~ "MCF",
fcz=="Not_Resistant" & mcf=="Not_Resistant" & amb=="Resistant" ~ "AMB",
fcz=="Resistant"& mcf=="Resistant"& amb=="Not_Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Not_Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Not_Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "MDR",
fcz=="Resistant"& mcf=="Resistant"& amb=="Resistant" ~ "XDR"
))
#Here I am adding another column that codes for presence or absence of known drug resistance genes
microreact_drug_resistance <- microreact_drug_resistance %>%
mutate( amr_gene = case_when(
erg11 != "WT" & fks1=="WT" ~ "ERG11",
fks1 !="WT"& erg11 == "WT" ~ "FKS1",
erg11 != "WT" & fks1 !="WT" ~ "ERG11 & FKS1",
fks1 =="WT" & erg11 == "WT" ~ "No AMR genes"
))
case_counts <- microreact_drug_resistance %>%
count(country, year, amr_gene, drug_resistance) %>%
mutate(year=as.factor(year)) %>%
print()
colors <- paletteer::palettes_d_names
my_palette <- paletteer_d("calecopal::kelp2")
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Case Counts per Year by Country"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("country",
" Select Country",
choices=unique(case_counts$country)),
selected = "United States"),
radioButtons("x",
"Select Fill Variable",
choices=c("amr_gene", "drug_resistance"), selected = "drug_resistance"),
), # close the first box
box(title = "Case Count", width = 7,
plotOutput("plot", width = "400px", height = "300px")
) # close the second box
) # close the row
) # close the dashboard body
# close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
case_counts %>%
filter(country==input$country) %>%
ggplot(aes_string(x = "year", y="n", fill=input$x)) +
geom_col() +
theme_classic()+
scale_fill_manual(values = my_palette)+
labs(x="Year")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(devtools)
install.packages(c("askpass", "BH", "bit", "blob", "brew", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "corrr", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "estimability", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "gapminder", "gargle", "generics", "gert", "gganimate", "ggforce", "ggmap", "ggplot2", "ggrepel", "ggsci", "ggVennDiagram", "gh", "gifski", "gitcreds", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labeling", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "maptools", "markdown", "modelr", "multcomp", "multcompView", "mvtnorm", "naniar", "norm", "openssl", "paletteer", "palmerpenguins", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "prettyunits", "prismatic", "processx", "promises", "proxy", "ps", "purrr", "qap", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "repr", "reprex", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "skimr", "snakecase", "sourcetools", "sp", "stringi", "stringr", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "transformr", "TSP", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "visdat", "vroom", "waldo", "whisker", "withr", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("askpass", "BH", "bit", "blob", "brew", "broom", "bslib", "cachem", "callr", "classInt", "cli", "colorspace", "commonmark", "corrr", "cpp11", "crayon", "credentials", "curl", "data.table", "DBI", "dbplyr", "desc", "devtools", "digest", "dplyr", "dtplyr", "e1071", "emmeans", "estimability", "evaluate", "fansi", "farver", "fastmap", "fontawesome", "forcats", "fs", "gapminder", "gargle", "generics", "gert", "gganimate", "ggforce", "ggmap", "ggplot2", "ggrepel", "ggsci", "ggVennDiagram", "gh", "gifski", "gitcreds", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "installr", "isoband", "janitor", "jpeg", "jsonlite", "knitr", "labeling", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "maptools", "markdown", "modelr", "multcomp", "multcompView", "mvtnorm", "naniar", "norm", "openssl", "paletteer", "palmerpenguins", "pillar", "pkgbuild", "pkgload", "plotly", "plyr", "png", "polyclip", "prettyunits", "prismatic", "processx", "promises", "proxy", "ps", "purrr", "qap", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "rematch", "remotes", "repr", "reprex", "rgdal", "rgeos", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rstudioapi", "rversions", "rvest", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "skimr", "snakecase", "sourcetools", "sp", "stringi", "stringr", "sys", "testthat", "TH.data", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tm", "transformr", "TSP", "tweenr", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "vegan", "viridis", "viridisLite", "visdat", "vroom", "waldo", "whisker", "withr", "wk", "xfun", "xml2", "yaml", "zip", "zoo"))
library(readr)
GJ1 <- read_csv("school/Fall 2023/R_Studio/GJ1.csv")
View(GJ1)
install.packages(c("askpass", "BH", "brew", "brio", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fs", "gargle", "gert", "ggmap", "ggplot2", "ggrepel", "ggthemes", "ggVennDiagram", "ggwordcloud", "gifski", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "jsonlite", "knitr", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "markdown", "mvtnorm", "norm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "processx", "profvis", "progress", "promises", "purrr", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "RgoogleMaps", "rlang", "roxygen2", "rprojroot", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils"))
install.packages(c("askpass", "BH", "brew", "brio", "broom", "bslib", "cachem", "classInt", "cli", "colorspace", "cpp11", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dplyr", "e1071", "emmeans", "evaluate", "fansi", "fastmap", "fs", "gargle", "gert", "ggmap", "ggplot2", "ggrepel", "ggthemes", "ggVennDiagram", "ggwordcloud", "gifski", "glue", "googledrive", "googlesheets4", "gtable", "gtools", "haven", "htmltools", "htmlwidgets", "httpuv", "httr2", "jsonlite", "knitr", "later", "lifecycle", "lpSolve", "lubridate", "magrittr", "maps", "markdown", "mvtnorm", "norm", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "processx", "profvis", "progress", "promises", "purrr", "ragg", "Rcpp", "RcppEigen", "readr", "readxl", "reprex", "RgoogleMaps", "rlang", "roxygen2", "rprojroot", "s2", "sandwich", "sass", "scales", "seriation", "sf", "shiny", "sp", "stringi", "stringr", "sys", "systemfonts", "testthat", "textshaping", "tibble", "tinytex", "tzdb", "units", "usethis", "utf8", "uuid", "vctrs", "viridis", "vroom", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils"))
library("swirl")
library(palmerspenguins)
library(palmerpenguins)
data<-"penguins"
head(penguins)
summary(penguins)
knitr::opts_chunk$set(echo = TRUE)
library(palmerpenguins)
data<- "penguins"
head(penguins)
library(tidyr)
library(tidyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(dplyr)
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(tidyr)
library(dplyr)
install.packages("rlang")
install.packages("rlang")
install.packages("rtools")
library(tidyr)
remove.packages("cli")
install.packages("cli")
install.packages("cli")
library(tidyr)
library(dplyr)
x
x<-5+7
x
# assign a series of words to the vector object called organism:
organism <- c("human", "mouse", "worm", "yeast", "maize")
# Then, recall it:
organism
# How many elements are in this vector?
length(organism)
# What is the third element?
organism[3]
kingdom <- c("animalia", "animalia", "animalia", "fungi", "plantae")
class(kingdom)
class(kingdom)
str(kingdom)
``` r
``` r
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
super_vector <- c(users, logins)
as.numeric(super_vector)
# Ensure you have a character vector called organism with a length of 5
str(organism)
# Create a numeric vector called chromosomes with corresponding data:
chromosomes <- c(23, 20, 5, 16, 10)
str(chromosomes)
# Create a logical vector called haploid with corresponding data
haploid <- c(FALSE, FALSE, FALSE, TRUE, FALSE)
str(haploid)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
# Now, put it all together using the function data.frame()
model_systems <- data.frame(organism, chromosomes, kingdom, haploid)
# Explore what you have created
model_systems
dim(model_systems)
str(model_systems)
# Explore what you have created
model_systems
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
``` {r}
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
```
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
``` {r}
``` {r}
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
class(logins)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
class(users)
class(logins)
super_vector <- c(users, logins)
class(super_vector)
as.numeric(super_vector)
# Heather's code:
languages <- ("English", "Spanish", "Japanese", "French")
# Fixed code:
languages <- c("English", "Spanish", "Japanese", "French")
greetings <- c("hello", "hola", "ohio", "bonjour")
partings <- c("bye", "adios", "mata", "salut")
dictionary <- data.frame(languages, greetings, partings)
dim(dictionary)
dictionary
knitr::opts_chunk$set(echo = TRUE)
users <- c("alvin", "viet", "leila")
logins <- c(12, 5, 34)
class(users)
class(logins)
super_vector <- c(users, logins)
class(super_vector)
as.numeric(super_vector)
# Ensure you have a character vector called organism with a length of 5
str(organism)
knitr::opts_chunk$set(echo = TRUE)
library("fs")
#Question 4
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders/Exfolder/Projects/Linkage")
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "to-do.txt")
write(message2, "project-ideas.txt")
#Question 5a - do not edit any of this code
paste(readLines("HomeworkAssignmentInput.txt"))
dir_tree(".")
#Question 5b
paste(readLines("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders/Exfolder/Plants-Genera/Silene")) #fill in path here
#Question 5b
paste(readLines("~/Exfolder/Plants-Genera/Silene")) #fill in path here
#Question 5b
paste(readLines("~/Exfolder/Plants-Genera/Silene/HomeworkAssignmentInput.txt")) #fill in path here
knitr::opts_knit$set(root.dir = "~/GitHub/CSU_CM515_2024")
#Question 4
setwd("~/modules/03_Files_and_Folders/Exfolder/Projects/Linkage")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '')
library("fs")
#Question 5b
paste(readLines("C:\Users\kemar\Documents\GitHub\CSU_CM515_2024\modules\03_Files_and_Folders\Exfolder\Plants-Genera\Silene\HomeworkAssignmentInput.txt")) #fill in path here
knitr::opts_knit$set(root.dir = "~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
#Question 4
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders/Exfolder/Projects/Linkage")
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "~/Exfolder/Projects/Linkage/to-do.txt")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
library("fs")
#Question 4
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "~/Exfolder/Projects/Linkage/to-do.txt")
#Question 4
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders/Exfolder/Projects/Linkage")
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "~/Exfolder/Projects/Linkage/to-do.txt")
write(message1, "to-do.txt")
write(message1, "to-do.txt")
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
library("fs")
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
setwd()
getwd()
write(message2, "~/Exfolder/Projects/Linkage/project-ideas.txt")
write(message1, "to-do.txt")
getwd()
write(message2, "Exfolder/Projects/Linkage/project-ideas.txt")
#Question 5a - do not edit any of this code
paste(readLines("HomeworkAssignmentInput.txt"))
dir_tree(".")
#Question 5b
paste(readLines("Exfolder/Plants-Genera/Silene/HomeworkAssignmentInput.txt")) #fill in path here
dir_tree(".") #keep this here
#Question 5c
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders/Exfolder/Plants-Genera/Silene")
paste(readLines("HomeworkAssignmentInput.txt")) #do not change this line
dir_tree(".") #keep this here
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
library("fs")
#Question 4
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "Exfolder/Projects/Linkage/project-ideas.txt/to-do.txt")
setwd("~/GitHub/CSU_CM515_2024/modules/03_Files_and_Folders")
#Question 4
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "Exfolder/Projects/Linkage/project-ideas.txt/to-do.txt")
#Question 4
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "Exfolder/Projects/Linkage/project-ideas.txt/to-do.txt")
write(message2, "Exfolder/Projects/Linkage/project-ideas.txt")
write(message1, "Exfolder/Projects/Linkage/to-do.txt")
#Question 4
message1<- "grade 300 exams, run 12 6 hour experiments, study for 27  hours, somehow get sleep"
message2<-"Projects:\n cabin in the woods\n electritian certification\n win lottery"
write(message1, "Exfolder/Projects/Linkage/to-do.txt")
write(message2, "Exfolder/Projects/Linkage/project-ideas.txt")
